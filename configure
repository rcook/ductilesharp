#!/usr/bin/env ruby

module Helpers
  def self.normalize_dir(path)
    File.expand_path(File.basename(path), File.dirname(path))
  end

  def self.run_command(cmd, throw_on_error = true)
    res = `#{cmd} 2>&1`
    raise RuntimeError.new(res) if throw_on_error && $?.to_i != 0
    [$?.to_i, res.chomp]
  end

  def self.parse_version_str(str)
    segments = str.split('.', -1)
    raise ArgumentError.new if segments.size < 1 || segments.size > 4
    (0..3).collect do |i|
      if i >= segments.size
        nil
      else
        raise ArgumentError.new unless segments[i] =~ /^(0|[1-9][0-9]*)$/
        Integer($1)
      end
    end
  end

  def self.get_ant_version(path)
    code, res = run_command("#{path} -version", true)
    if res =~ /^Apache Ant version ([0-9]+)\.([0-9]+)\.([0-9]+) /
      [Integer($1), Integer($2), Integer($3), nil]
    else
      nil
    end
  end

  def self.get_gmcs_version(path)
    code, res = run_command("#{path} --version", true)
    if res =~ /^Mono C# compiler version ([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)$/
      [Integer($1), Integer($2), Integer($3), Integer($4)]
    else
      nil
    end
  end

  def self.get_mono_version(path)
    code, res = run_command("#{path} --version", true)
    if res =~ /^Mono JIT compiler version ([0-9]+)\.([0-9]+)\.([0-9]+) /
      [Integer($1), Integer($2), Integer($3), nil]
    else
      nil
    end
  end

  def self.get_nunit_console_version(path)
    # Remove C:\NUnitPrimaryTrace.txt: this bug should be fixed in NUnit 2.5.
    code, res = run_command("#{path} -help; rm -f 'C:\\NUnitPrimaryTrace.txt'", true)
    if res =~ /^NUnit version ([0-9]+)\.([0-9]+)\.([0-9]+)$/
      [Integer($1), Integer($2), Integer($3), nil]
    else
      nil
    end
  end
end

class FileFinder
  def usr_dir(*args)
    if !@usr_dir
      ruby_path = find_file_helper(nil, 'ruby')
      raise RuntimeError.new('Cannot infer location of "usr" directory') unless ruby_path
      bin_dir = File.dirname(ruby_path)
      raise RuntimeError.new('Cannot infer location of "usr" directory') unless bin_dir
      raise RuntimeError.new('Cannot infer location of "usr" directory') unless File.basename(bin_dir) == 'bin'
      usr_dir = File.dirname(bin_dir)
      raise RuntimeError.new('Cannot infer location of "usr" directory') unless usr_dir
      @usr_dir = Helpers::normalize_dir(usr_dir)
    end
    File.join(@usr_dir, *args)
  end

  def opt_dir(*args)
    @opt_dir = Helpers::normalize_dir(usr_dir.sub('usr', 'opt')) if !@opt_dir
    File.join(@opt_dir, *args)
  end

  def find_file(messages, search_paths, *file_names, &version_block)
    file_names.each do |file_name|
      res = find_file_inner(messages, search_paths, file_name, &version_block)
      return res if !res.nil?
    end
    if file_names.size > 1
      messages << "Could not find one of #{file_names.collect {|f| "\"#{f}\""}.join(', ')}."
    else
      messages << "Could not find \"#{file_names.first}\"."
    end
  end

  def find_file_inner(messages, search_paths, file_name, &version_block)
    path = find_file_helper(search_paths, file_name)
    return nil if !path

    # Check versions if required.
    if version_block
      res = version_block.call(path)
      if res.is_a?(Array)
        version_str = res.compact.join('.')
        messages << "Please install version #{version_str} or higher of \"#{file_name}\"."
        return nil
      end
      if res != true
        messages << "Could not get version information for \"#{file_name}\"."
        return nil
      end
    end

    path
  end
  private :find_file_inner

  def find_file_helper(search_paths, file_name)
    if search_paths
      search_paths = [search_paths].flatten.compact
      search_paths.each do |search_path|
        pattern = File.join(search_path, '**', file_name)
        paths = Dir.glob(pattern)
        return paths.first if paths.size > 0
      end
      return nil
    end

    code, res = Helpers::run_command("which #{file_name}", false)
    return res if code == 0
    return nil if code == 256
    raise RuntimeError.new(res)
  end
  private :find_file_helper

  def environment_paths
    @environment_paths ||= ENV['PATH'].split(':')
  end
  private :environment_paths
end

def check_version_helper(min_version_str, version)
  return nil if version.nil?
  min_version = Helpers::parse_version_str(min_version_str)
  min_major, min_minor, min_build, min_revision = min_version
  major, minor, build, revision = version
  return min_version if major < min_major || major == min_major && minor < min_minor
  true
end

messages = []
target_dir = nil
args = ARGV.clone
while arg = args.shift
  if arg =~ /^--prefix=(.+)$/
    target_dir = Helpers::normalize_dir($1)
  end
end
messages << 'Must specify target directory via "--prefix".' if !target_dir

if !messages.empty?
  messages.each do |message|
    $stderr.puts message
  end
  exit 1
end

properties = {
  'configuration' => 'debug',
  'target-dir' => target_dir
}
target_bin_dir = File.join(target_dir, 'bin')

f = FileFinder.new
ANT_LIB_PATH = [
  f.usr_dir(%w{share java}),
  f.opt_dir(%w{local share java})
]

ant_contrib_path = f.find_file(messages, ANT_LIB_PATH, 'ant-contrib*.jar')
properties['ant-contrib-path'] = ant_contrib_path if ant_contrib_path

ant_dotnet_path = f.find_file(messages, ANT_LIB_PATH, 'ant-dotnet*.jar')
properties['ant-dotnet-path'] = ant_dotnet_path if ant_dotnet_path

f.find_file(messages, nil, 'ant') do |path|
  check_version_helper('1.7', Helpers::get_ant_version(path))
end

stable_gmcs_path = f.find_file(messages, nil, 'gmcs') do |path|
  check_version_helper('1.9', Helpers::get_gmcs_version(path))
end
properties['stable-gmcs-path'] = stable_gmcs_path if stable_gmcs_path

nunit_console_path = f.find_file(messages, f.usr_dir(%w{lib nunit}), 'nunit-console.exe') do |path|
  check_version_helper('2.4', Helpers::get_nunit_console_version(path))
end
properties['nunit-console-path'] = nunit_console_path if nunit_console_path

nunit_lib_dir = f.find_file(messages, f.usr_dir(%w{lib cli}), 'nunit-2.4', 'nunit.framework-2.4')
properties['nunit-lib-dir'] = nunit_lib_dir if nunit_lib_dir

target_gacutil_path = f.find_file(messages, target_bin_dir, 'gacutil')
properties['target-gacutil-path'] = target_gacutil_path if target_gacutil_path

target_mono_path = f.find_file(messages, target_bin_dir, 'mono') do |path|
  check_version_helper('2.8.1', Helpers::get_mono_version(path))
end
properties['target-mono-path'] = target_mono_path if target_mono_path

if !messages.empty?
  messages.each do |message|
    $stderr.puts message
  end
  exit 1
end

common_properties_path = File.expand_path('common.properties', File.dirname(__FILE__))
File.open(common_properties_path, 'w') do |f|
  properties.keys.sort.each do |key|
    puts "Created property #{key}=#{properties[key]}"
    f.puts "#{key}=#{properties[key]}"
  end
end

