#!/usr/bin/env ruby

def run_command(cmd, throw_on_error = true)
  res = `#{cmd} 2>&1`
  raise RuntimeError.new(res) if throw_on_error && $?.to_i != 0
  [$?.to_i, res.chomp]
end

def parse_version_str(str)
  segments = str.split('.', -1)
  raise ArgumentError.new if segments.size < 1 || segments.size > 4
  (0..3).collect do |i|
    if i >= segments.size
      nil
    else
      raise ArgumentError.new unless segments[i] =~ /^(0|[1-9][0-9]*)$/
      Integer($1)
    end
  end
end

def find_command(name)
  code, res = run_command("which #{name}", false)
  if code == 0
    res
  elsif code == 256
    nil
  else
    raise RuntimeError.new(res)
  end
end

def find_command_version(messages, name, version_str, &block)
  min_major, min_minor, min_build, min_revision = parse_version_str(version_str)

  path = find_command(name)
  if !path
    messages << "Could not find \"#{name}\" on path."
    return nil
  end

  res = block.call(path)
  if !res
    messages << "Could not get version information for \"#{name}\"."
    return nil
  end

  major, minor, build, revision = res
  if major < min_major || major == min_major && minor < min_minor
    messages << "Please install version #{min_major}.#{min_minor} or higher of \"#{name}\"."
    return nil
  end

  path
end

def get_ant_version(path)
  code, res = run_command("#{path} -version", true)
  if res =~ /^Apache Ant version ([0-9]+)\.([0-9]+)\.([0-9]+) /
    [Integer($1), Integer($2), Integer($3), nil]
  else
    nil
  end
end

def get_gmcs_version(path)
  code, res = run_command("#{path} --version", true)
  if res =~ /^Mono C# compiler version ([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)$/
    [Integer($1), Integer($2), Integer($3), Integer($4)]
  else
    nil
  end
end

def get_mono_version(path)
  code, res = run_command("#{path} --version", true)
  if res =~ /^Mono JIT compiler version ([0-9]+)\.([0-9]+)\.([0-9]+) /
    [Integer($1), Integer($2), Integer($3), nil]
  else
    nil
  end
end

def get_nunit_console_version(path)
  # Remove C:\NUnitPrimaryTrace.txt: this bug should be fixed in NUnit 2.5.
  code, res = run_command("#{path} -help; rm -f 'C:\\NUnitPrimaryTrace.txt'", true)
  if res =~ /^NUnit version ([0-9]+)\.([0-9]+)\.([0-9]+)$/
    [Integer($1), Integer($2), Integer($3), nil]
  else
    nil
  end
end

def find_nunit_framework(messages, nunit_console_path)
  usr_dir = File.dirname(File.dirname(nunit_console_path))
  paths = Dir.glob("#{usr_dir}/lib/cli/nunit*/nunit.framework.dll")
  if paths.size < 1
    messages << "Could not find \"nunit.framework.dll\" under \"#{usr_dir}\"."
    return nil
  end
  paths[0]
end

messages = []
prefix = nil
args = ARGV.clone
while arg = args.shift
  if arg =~ /^--prefix=(.+)$/
    prefix = $1
  end
end
messages << 'Must specify installation directory via "--prefix".' if !prefix

if !messages.empty?
  messages.each do |message|
    $stderr.puts message
  end
  exit 1
end

properties = {
  'configuration' => 'debug',
  'install-path' => prefix
}

find_command_version(messages, 'ant', '1.7') {|path| get_ant_version(path)}

stable_gmcs_path = find_command_version(messages, 'gmcs', '1.9') {|path| get_gmcs_version(path)}
properties['stable-gmcs-path'] = stable_gmcs_path if stable_gmcs_path

stable_mono_path = find_command_version(messages, 'mono', '1.9') {|path| get_mono_version(path)}
properties['stable-mono-path'] = stable_mono_path if stable_mono_path

nunit_console_path = find_command_version(messages, 'nunit-console', '2.4') {|path| get_nunit_console_version(path)}
properties['nunit-console-path'] = nunit_console_path if nunit_console_path

nunit_framework_path = find_nunit_framework(messages, nunit_console_path)
properties['nunit-framework-path'] = nunit_framework_path if nunit_framework_path

if !messages.empty?
  messages.each do |message|
    $stderr.puts message
  end
  exit 1
end

common_properties_path = File.expand_path('common.properties', File.dirname(__FILE__))
File.open(common_properties_path, 'w') do |f|
  properties.keys.sort.each do |key|
    f.puts "#{key}=#{properties[key]}"
  end
end

